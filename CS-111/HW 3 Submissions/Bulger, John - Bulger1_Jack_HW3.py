{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Tortise one or two?:  one\n",
      "Triangle or Square?:  Square\n",
      "Starting point in degrees:  0\n",
      "Sidelength:  100\n",
      "Color:  \"blue\"\n",
      "Initial x value:  0\n",
      "Initial y value:  0\n",
      "Spread, Zoom, or Slide?:  Spread\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a shape: \n"
     ]
    }
   ],
   "source": [
    "import turtle\n",
    "\n",
    "one = turtle.Turtle()\n",
    "two = turtle.Turtle()\n",
    "\n",
    "\n",
    "\n",
    "def makeSquare(tortise, heading, x, y, length, fillcolor):\n",
    "    tortise.goto(x,y)\n",
    "    tortise.setheading(heading)\n",
    "    tortise.fillcolor(fillcolor)\n",
    "    tortise.begin_fill()\n",
    "    for i in range(4):\n",
    "        tortise.forward(length)\n",
    "        tortise.left(90)\n",
    "    tortise.end_fill()\n",
    "\"\"\" Here I created the function makeSquare in which I implemented a for loop with two functional abstractions.\n",
    "    The movement forward and the movement left. This was an abstraction because when I typed in the commands and ran it,\n",
    "    I knew what it was doing but not how.\"\"\"\n",
    "    \n",
    "def makeTriangle(tortise, heading, x, y, length, fillcolor):\n",
    "    tortise.goto(x,y)\n",
    "    tortise.setheading(heading)\n",
    "    tortise.fillcolor(fillcolor)\n",
    "    tortise.begin_fill()\n",
    "    for i in range(3):\n",
    "        tortise.forward(length)\n",
    "        tortise.left(120)\n",
    "    tortise.end_fill()\n",
    "\"\"\" Here I created the function makeTriangle in which I implemented a for loop with two functional abstractions\n",
    "    just like the previous function.The movement forward and the movement left. This was an abstraction because \n",
    "    when I typed in the commands and ran it, I knew what it was doing but not how.\"\"\"\n",
    "\n",
    "def zoom(tortise, heading, x, y, length, fillcolor):\n",
    "    typeshape=()\n",
    "    if typeshape == (\"Square\"):                                          #If user wants square then use drawsquare function\n",
    "        for drawsquare in range(5):\n",
    "            makeSquare(tortise, heading, x, y, length, fillcolor)\n",
    "            x = x - 50\n",
    "            length = length + 100\n",
    "    elif typeshape == (\"Triangle\"):                                     #If user wants triangle then use drawtriangle function\n",
    "        for drawtriangle in range(5):\n",
    "            makeTriangle(tortise, heading, x, y, length, fillcolor)\n",
    "            x = x - 50\n",
    "            length = length + 100\n",
    "    else :\n",
    "        print(\"Enter a shape: \")        \n",
    "\n",
    "def spread(tortise, heading, x, y, length, fillcolor):\n",
    "    typeshape=()\n",
    "    if typeshape == (\"Square\"):                                           #If user wants square then use drawsquare function\n",
    "        for drawsquare in range(5): \n",
    "            makeSquare(tortise, heading, x, y, length, fillcolor)\n",
    "            heading = heading + 25\n",
    "    elif typeshape ==(\"Triangle\"):                                      #If user wants triangle then use drawtriangle function\n",
    "        for drawtriangle in range(5):\n",
    "            makeTriangle(tortise, heading, x, y, length, fillcolor)\n",
    "            heading = heading + 25 \n",
    "    else :\n",
    "        print(\"Enter a shape: \")\n",
    "        \n",
    "def slide(tortise, heading, x, y, length, fillcolor):\n",
    "    typeshape=()\n",
    "    if typeshape == (\"Square\"):                                         #If user wants square then use drawsquare function\n",
    "        for drawsquare in range(5):\n",
    "            makeSquare(tortise, heading, x, y, length, fillcolor)\n",
    "            x = x - 50\n",
    "    elif typeshape == (\"Triangle\"):                                   #If user wants triangle then use drawtriangle function\n",
    "        for drawtriangle in range(5):\n",
    "            makeTriangle(tortise, heading, x, y, length, fillcolor)\n",
    "            x = x - 50 \n",
    "    else :\n",
    "        print(\"Enter a shape: \")\n",
    "        \n",
    "\"\"\" Spread, Slide, and Zoom functions shorten the number of elementary operations which shortens the\n",
    "    the time it takes to run an algorithm (time complexity). The function itself is a black box.\"\"\"\n",
    "        \n",
    "def main():\n",
    "    tortise = input(\"Tortise one or two?: \")\n",
    "    typeshape = input(\"Triangle or Square?: \")\n",
    "    heading = input(\"Starting point in degrees: \")\n",
    "    length = input(\"Sidelength: \")\n",
    "    fillcolor = input(\"Color: \")\n",
    "    x = input(\"Initial x value: \")\n",
    "    y = input(\"Initial y value: \")\n",
    "    shapefigure = input(\"Spread, Zoom, or Slide?: \")\n",
    "    \n",
    "    if (shapefigure == \"Zoom\"):                                          #If object/figure is zoom then use zoom function) \n",
    "        zoom(tortise, heading, x, y, length, fillcolor) \n",
    "    elif (shapefigure == \"Spread\"):\n",
    "        spread(tortise, heading, x, y, length, fillcolor)\n",
    "    elif (shapefigure == \"Slide\"):\n",
    "        slide(tortise, heading, x, y, length, fillcolor)\n",
    "    else:\n",
    "        print(\"Enter a figure for the shape: \")\n",
    "    \n",
    "main()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
